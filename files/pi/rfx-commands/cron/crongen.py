#!/usr/bin/env python

import argparse
import datetime
import sys
import os
import json
import astral
import re
import rethinkdb as r


def main():

    #
    # Parse arguments
    #

    parser = argparse.ArgumentParser(description='Chron generator')

    parser.add_argument(
        '--rethinkdb-host', required=True,
        default="localhost",
        dest='rethinkdbhost'
    )

    parser.add_argument(
        '--rethink-db', required=True,
        default="ripan",
        dest='rethinkdb'
    )

    parser.add_argument(
        '--rethink-table', required=True,
        default="test",
        dest='rethinktable'
    )

    parser.add_argument(
        '--mailto', required=True,
        default="",
        dest='mailto'
    )

    parser.add_argument(
        '--longitude', required=True,
        default=0,
        type=float,
        dest='longitude'
    )

    parser.add_argument(
        '--latitude', required=True,
        default=0,
        type=float,
        dest='latitude'
    )

    parser.add_argument(
        '--altitude', required=True,
        default=0,
        type=float,
        dest='altitude'
    )

    args = parser.parse_args()

    # Connect to rethinkdb
    try:
        r.connect(args.rethinkdbhost, 28015, args.rethinkdb).repl()
        nexa = r.table(args.rethinktable).order_by(r.asc('_item')).run()
    except Exception as e:
        sys.exit(1)

    lastItemName = ""
    today = datetime.date.today()

    mylocation = astral.Location(info=("Myplace", "Mycountry", args.latitude, args.longitude, "Europe/Stockholm", args.altitude))
    mylocation.solar_depression = "civil"

    print "#"
    print "# Generated by script {0}".format(os.path.basename(__file__))
    print "#"
    print "MAILTO={0}".format(args.mailto)
    print "#"

    result = mylocation.sun(date=today)
    for k in ["dawn", "sunrise", "noon", "sunset", "dusk"]:
        print "# %-7s %s" % (k, result[k])

    # Loop all cron entries

    for item in nexa:
        if '_deleted' in item:
            continue
        item['_sunriseset'] = result
        if item['name'] != lastItemName:
            lastItemName = banner(item['name'])

        for k in ['on1', 'off1', 'on2', 'off2', 'on3', 'off3']:
            if k in item or item['sunset'] is not None:
                cronOnOff(k, item)

    sys.exit(0)


def banner(name):
    print "#"
    print "# {0}".format(name.encode('utf-8'))
    print "#"
    return name


def cronOnOff(key, item):
    action = "off"
    active = ""
    days = item['days']
    nexaid = item['nexaid']

    if re.match(r'^on', key):
        action = "on"

    if item['_active'] is False:
        active = "# "

    if days == "1,2,3,4,5":
        days = "1-5"

    if days == "0,1,2,3,4,5,6":
        days = "*"

    # Any clock defined ?

    if len(item[key]):
        clock = item[key].split(':')

        print "{0}{1:0>2} {2:0>2} * * {3} pi /home/pi/rfx-commands/commands/cmd-to-nexa.sh {4} {5}".format(
            active,
            clock[1],
            clock[0],
            days,
            nexaid,
            action
        )

    # Any sunset defined ?

    if item['sunset'] is not None:
        sunset = item['_sunriseset']['sunset']
        offset = sunset + datetime.timedelta(minutes=item['sunset'])

        comment = "Sunset {0:0>2}:{1:0>2} {2} min".format(sunset.hour, sunset.minute, item['sunset'])
        print "{0}{1:0>2} {2:0>2} * * {3} pi /home/pi/rfx-commands/commands/cmd-to-nexa.sh {4} {5} # {6}".format(
            active,
            offset.minute,
            offset.hour,
            days,
            nexaid,
            "on",
            comment
        )

        # Reset this, We only want one per row

        item['sunset'] = None

if __name__ == "__main__":
    main()
